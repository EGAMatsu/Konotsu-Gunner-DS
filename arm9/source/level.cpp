#include <nds.h>
#include "gl2d.h"
#include <maxmod9.h>

#include "graphics/fontHandler.h"
#include "graphics/graphics.h"

#include "player.h"

#include "logo_title.h"
#include "bottomImage.h"
#include "spr_aimbutton.h"
#include "tiles.h"

#include "testmap.h"

#define bgTile 11
#define grayBlockTile 17

extern bool fadeType;
extern void playMusic();

static bool inited = false;

u8* mapLocation = (u8*)testMap;

int mapHsize = 32;
int mapVsize = 24;

int cameraXpos = 0;
int cameraYpos = 0;

extern int playerX, playerY;

static int titleTexID, bottomTexID, aimTexID, tileTexID;
static glImage bottomImage[(256 / 32) * (192 / 32)];
static glImage aimButtonImage[(32 / 32) * (128 / 32)];
glImage tileImage[(128 / 16) * (128 / 16)];
glImage titleImage[(256 / 32) * (192 / 32)];

//extern mm_sound_effect snd_jump;

void levelGraphicLoad(void) {
	titleTexID = glLoadTileSet(titleImage, // pointer to glImage array
							32, // sprite width
							32, // sprite height
							256, // bitmap width
							192, // bitmap height
							GL_RGB16, // texture type for glTexImage2D() in videoGL.h
							TEXTURE_SIZE_256, // sizeX for glTexImage2D() in videoGL.h
							TEXTURE_SIZE_256, // sizeY for glTexImage2D() in videoGL.h
							TEXGEN_OFF | GL_TEXTURE_COLOR0_TRANSPARENT, // param for glTexImage2D() in videoGL.h
							4, // Length of the palette to use (16 colors)
							(u16*) logo_titlePal, // Load our 16 color tiles palette
							(u8*) logo_titleBitmap // image data generated by GRIT
							);

	bottomTexID = glLoadTileSet(bottomImage, // pointer to glImage array
							32, // sprite width
							32, // sprite height
							256, // bitmap width
							192, // bitmap height
							GL_RGB16, // texture type for glTexImage2D() in videoGL.h
							TEXTURE_SIZE_256, // sizeX for glTexImage2D() in videoGL.h
							TEXTURE_SIZE_256, // sizeY for glTexImage2D() in videoGL.h
							TEXGEN_OFF, // param for glTexImage2D() in videoGL.h
							4, // Length of the palette to use (16 colors)
							(u16*) bottomImagePal, // Load our 16 color tiles palette
							(u8*) bottomImageBitmap // image data generated by GRIT
							);

	aimTexID = glLoadTileSet(aimButtonImage, // pointer to glImage array
							32, // sprite width
							32, // sprite height
							32, // bitmap width
							128, // bitmap height
							GL_RGB16, // texture type for glTexImage2D() in videoGL.h
							TEXTURE_SIZE_32, // sizeX for glTexImage2D() in videoGL.h
							TEXTURE_SIZE_128, // sizeY for glTexImage2D() in videoGL.h
							TEXGEN_OFF | GL_TEXTURE_COLOR0_TRANSPARENT, // param for glTexImage2D() in videoGL.h
							3, // Length of the palette to use (16 colors)
							(u16*) spr_aimbuttonPal, // Load our 16 color tiles palette
							(u8*) spr_aimbuttonBitmap // image data generated by GRIT
							);

	tileTexID = glLoadTileSet(tileImage, // pointer to glImage array
							16, // sprite width
							16, // sprite height
							128, // bitmap width
							128, // bitmap height
							GL_RGB16, // texture type for glTexImage2D() in videoGL.h
							TEXTURE_SIZE_128, // sizeX for glTexImage2D() in videoGL.h
							TEXTURE_SIZE_128, // sizeY for glTexImage2D() in videoGL.h
							GL_TEXTURE_WRAP_S | GL_TEXTURE_WRAP_T | TEXGEN_OFF | GL_TEXTURE_COLOR0_TRANSPARENT, // param for glTexImage2D() in videoGL.h
							16, // Length of the palette to use (16 colors)
							(u16*) tilesPal, // Load our 16 color tiles palette
							(u8*) tilesBitmap // image data generated by GRIT
							);
}

void levelMode(void) {
	if (!inited) {
		playerGraphicLoad();
		fadeType = true;
		playMusic();
		inited = true;
	}

	scanKeys();
	int pressed = keysDown();
	int held = keysHeld();
	
	playerLoop(pressed, held);
}

void levelGraphicDisplay(void) {
	glBoxFilled(0, 0, 256, 192, RGB15(85/8, 85/8, 255/8));
	/*for (int x = 0; x < 256; x += 16) {
		for (int y = 0; y < 192; y += 16) {
			glSprite(x, y, GL_FLIP_NONE, &tileImage[bgTile]);
		}
	}*/
	//if (mapHsize>16 && playerX>128) {
		cameraXpos = playerX-128;
	/*	if (cameraXpos > (mapHsize*16)-256) {
			cameraXpos = (mapHsize*16)-256;
		}
	} else {
		cameraXpos = 0;
	}*/
	//if (mapVsize>12 && playerY>192/2) {
		cameraYpos = playerY-(192/2);
	/*	if (cameraYpos > (mapVsize*16)-192) {
			cameraYpos = (mapVsize*16)-192;
		}
	} else {
		cameraYpos = 0;
	}*/
	for (int x = 0; x < mapHsize; x++) {
		for (int y = 0; y < mapVsize; y++) {
			if (mapLocation[(y*mapHsize)+x] != 7) {
				glSprite((x*16)-cameraXpos, (y*16)-cameraYpos, GL_FLIP_NONE, &tileImage[mapLocation[(y*mapHsize)+x]]);
			}
		}
	}
	renderPlayer();
}

void levelGraphicBottomDisplay(void) {
	for (int x = 0; x < 8; x++) {
		for (int y = 0; y < 6; y++) {
			glSprite(x*32, y*32, GL_FLIP_NONE, &bottomImage[(y*8)+x]);
		}
	}
	glSprite(64, 32, GL_FLIP_H, &aimButtonImage[1]);
	glSprite(112, 32, GL_FLIP_NONE, &aimButtonImage[0]);
	glSprite(160, 32, GL_FLIP_NONE, &aimButtonImage[1]);
	glSprite(32, 64, GL_FLIP_H, &aimButtonImage[2]);
	glSprite(192, 64, GL_FLIP_NONE, &aimButtonImage[2]);
}
