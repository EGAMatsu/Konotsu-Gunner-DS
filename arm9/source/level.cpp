#include <nds.h>
#include "gl2d.h"
#include <maxmod9.h>

#include "graphics/fontHandler.h"
#include "graphics/graphics.h"

#include "player.h"

#include "bottomImage.h"
#include "spr_aimbutton.h"
#include "tiles.h"

#include "testmap.h"

#define bgTile 11
#define grayBlockTile 17

extern bool fadeType;
extern void playAltitMusic();

static bool inited = false;

u8* mapLocation = (u8*)testMap;

int mapHsize = 32;
int mapVsize = 24;

int cameraXpos = 0;
int cameraYpos = 0;

extern int playerX[2], playerY[2];

static int tileTexID;
static glImage aimButtonImage[(32 / 32) * (128 / 32)];
glImage tileImage[(128 / 16) * (128 / 16)];

void levelGraphicLoad(void) {
	tileTexID = glLoadTileSet(tileImage, // pointer to glImage array
							16, // sprite width
							16, // sprite height
							128, // bitmap width
							128, // bitmap height
							GL_RGB16, // texture type for glTexImage2D() in videoGL.h
							TEXTURE_SIZE_128, // sizeX for glTexImage2D() in videoGL.h
							TEXTURE_SIZE_128, // sizeY for glTexImage2D() in videoGL.h
							GL_TEXTURE_WRAP_S | GL_TEXTURE_WRAP_T | TEXGEN_OFF | GL_TEXTURE_COLOR0_TRANSPARENT, // param for glTexImage2D() in videoGL.h
							16, // Length of the palette to use (16 colors)
							(u16*) tilesPal, // Load our 16 color tiles palette
							(u8*) tilesBitmap // image data generated by GRIT
							);
}

void levelMode(void) {
	if (!inited) {
		playerGraphicLoad();
		decompress(bottomImageBitmap, bgGetGfxPtr(bg3), LZ77Vram);
		bgSetScroll(bg3, 0, 0);
		bgScroll(bg3, 0, 0);
		oamClear(&oamSub, 0, 2);

		gfxSub = oamAllocateGfx(&oamSub, SpriteSize_32x64, SpriteColorFormat_16Color);

		memcpy(gfxSub, spr_aimbuttonTiles, spr_aimbuttonTilesLen);

		for (int i = 0; i < 16; i++) {
			SPRITE_PALETTE_SUB[i] = spr_aimbuttonPal[i];
		}

		oamSet(&oamSub, 
			0, 
			80, 48, 
			0, 
			0,
			SpriteSize_32x32, 
			SpriteColorFormat_16Color, 
			gfxSub+(32*8), 
			-1, 
			false, 
			false,	
			false, false, 
			false
			);

		oamSet(&oamSub, 
			1, 
			112, 48, 
			0, 
			0,
			SpriteSize_32x32, 
			SpriteColorFormat_16Color, 
			gfxSub, 
			-1, 
			false, 
			false,	
			false, false, 
			false
			);

		oamSet(&oamSub, 
			2, 
			144, 48, 
			0, 
			0,
			SpriteSize_32x32, 
			SpriteColorFormat_16Color, 
			gfxSub+(32*8), 
			-1, 
			false, 
			false,	
			true, false, 
			false
			);

		oamSet(&oamSub, 
			3, 
			80, 80, 
			0, 
			0,
			SpriteSize_32x32, 
			SpriteColorFormat_16Color, 
			gfxSub+(64*8), 
			-1, 
			false, 
			false,	
			false, false, 
			false
			);

		oamSet(&oamSub, 
			4, 
			144, 80, 
			0, 
			0,
			SpriteSize_32x32, 
			SpriteColorFormat_16Color, 
			gfxSub+(64*8), 
			-1, 
			false, 
			false,	
			true, false, 
			false
			);

		oamSet(&oamSub, 
			5, 
			80, 112, 
			0, 
			0,
			SpriteSize_32x32, 
			SpriteColorFormat_16Color, 
			gfxSub+(32*8), 
			-1, 
			false, 
			false,	
			false, true, 
			false
			);

		oamSet(&oamSub, 
			6, 
			144, 112, 
			0, 
			0,
			SpriteSize_32x32, 
			SpriteColorFormat_16Color, 
			gfxSub+(32*8), 
			-1, 
			false, 
			false,	
			true, true, 
			false
			);

		fadeType = true;
		playAltitMusic();
		inited = true;
	}

	scanKeys();
	int pressed = keysDown();
	int held = keysHeld();
	
	playerLoop(pressed, held);
}

void levelGraphicDisplay(void) {
	glBoxFilled(0, 0, 256, 192, RGB15(85/8, 85/8, 255/8));
	/*for (int x = 0; x < 256; x += 16) {
		for (int y = 0; y < 192; y += 16) {
			glSprite(x, y, GL_FLIP_NONE, &tileImage[bgTile]);
		}
	}*/
	//if (mapHsize>16 && playerX>128) {
		cameraXpos = playerX[0]-128;
	/*	if (cameraXpos > (mapHsize*16)-256) {
			cameraXpos = (mapHsize*16)-256;
		}
	} else {
		cameraXpos = 0;
	}*/
	//if (mapVsize>12 && playerY>192/2) {
		cameraYpos = playerY[0]-(192/2);
	/*	if (cameraYpos > (mapVsize*16)-192) {
			cameraYpos = (mapVsize*16)-192;
		}
	} else {
		cameraYpos = 0;
	}*/
	for (int x = 0; x < mapHsize; x++) {
		for (int y = 0; y < mapVsize; y++) {
			if (mapLocation[(y*mapHsize)+x] != 7) {
				glSprite((x*16)-cameraXpos, (y*16)-cameraYpos, GL_FLIP_NONE, &tileImage[mapLocation[(y*mapHsize)+x]]);
			}
		}
	}
	renderPlayer();
}
